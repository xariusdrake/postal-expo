{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useMemo, useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar findIndex = function findIndex(_ref, map) {\n  var locationX = _ref.locationX,\n      locationY = _ref.locationY;\n\n  for (var _i = 0, _Object$entries = Object.entries(map); _i < _Object$entries.length; _i++) {\n    var _ref2 = _Object$entries[_i];\n\n    var _ref3 = _slicedToArray(_ref2, 2);\n\n    var index = _ref3[0];\n    var _ref3$ = _ref3[1];\n    var x = _ref3$.x;\n    var y = _ref3$.y;\n    var xEnd = _ref3$.xEnd;\n    var yEnd = _ref3$.yEnd;\n\n    if (x < locationX && locationX < xEnd && y < locationY && locationY < yEnd) {\n      return parseInt(index, 10);\n    }\n  }\n\n  return -1;\n};\n\nvar useClearByFocusCell = function useClearByFocusCell(options) {\n  var valueRef = useRef(options);\n  var cellsLayouts = useRef({});\n  valueRef.current = options;\n\n  var clearCodeByCoords = function clearCodeByCoords(coords) {\n    var index = findIndex(coords, cellsLayouts.current);\n\n    if (index !== -1) {\n      var _valueRef$current = valueRef.current,\n          value = _valueRef$current.value,\n          setValue = _valueRef$current.setValue;\n      var text = (value || '').slice(0, index);\n      setValue(text);\n    }\n  };\n\n  var getCellOnLayoutHandler = function getCellOnLayoutHandler(index) {\n    return function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height,\n          x = _event$nativeEvent$la.x,\n          y = _event$nativeEvent$la.y;\n      cellsLayouts.current[\"\" + index] = {\n        x: x,\n        xEnd: x + width,\n        y: y,\n        yEnd: y + height\n      };\n    };\n  };\n\n  var onPress = function onPress(event) {\n    return clearCodeByCoords(event.nativeEvent);\n  };\n\n  var onClick = function onClick(e) {\n    var offset = e.target.getClientRects()[0];\n    var locationX = e.clientX - offset.left;\n    var locationY = e.clientY - offset.top;\n    clearCodeByCoords({\n      locationX: locationX,\n      locationY: locationY\n    });\n  };\n\n  return [useMemo(function () {\n    return Platform.OS === 'web' ? {\n      onClick: onClick\n    } : {\n      onPress: onPress\n    };\n  }, []), getCellOnLayoutHandler];\n};\n\nexport default useClearByFocusCell;","map":{"version":3,"sources":["/Users/xrs/DATA/Project/postalvn/postal-mobile/node_modules/react-native-confirmation-code-field/esm/useClearByFocusCell.js"],"names":["useMemo","useRef","findIndex","map","locationX","locationY","Object","entries","index","x","y","xEnd","yEnd","parseInt","useClearByFocusCell","options","valueRef","cellsLayouts","current","clearCodeByCoords","coords","value","setValue","text","slice","getCellOnLayoutHandler","event","nativeEvent","layout","width","height","onPress","onClick","e","offset","target","getClientRects","clientX","left","clientY","top","Platform","OS"],"mappings":"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","sourcesContent":["import {useMemo, useRef} from 'react';\nimport {Platform} from 'react-native';\nconst findIndex = ({locationX, locationY}, map) => {\n  for (const [index, {x, y, xEnd, yEnd}] of Object.entries(map)) {\n    if (\n      x < locationX &&\n      locationX < xEnd &&\n      y < locationY &&\n      locationY < yEnd\n    ) {\n      return parseInt(index, 10);\n    }\n  }\n  return -1;\n};\nconst useClearByFocusCell = (options) => {\n  const valueRef = useRef(options);\n  const cellsLayouts = useRef({});\n  valueRef.current = options;\n  const clearCodeByCoords = (coords) => {\n    const index = findIndex(coords, cellsLayouts.current);\n    if (index !== -1) {\n      const {value, setValue} = valueRef.current;\n      const text = (value || '').slice(0, index);\n      setValue(text);\n    }\n  };\n  const getCellOnLayoutHandler = (index) => (event) => {\n    const {width, height, x, y} = event.nativeEvent.layout;\n    cellsLayouts.current[`${index}`] = {\n      x,\n      xEnd: x + width,\n      y,\n      yEnd: y + height,\n    };\n  };\n  const onPress = (event) => clearCodeByCoords(event.nativeEvent);\n  // For support react-native-web\n  const onClick = (e) => {\n    const offset = e.target.getClientRects()[0];\n    const locationX = e.clientX - offset.left;\n    const locationY = e.clientY - offset.top;\n    clearCodeByCoords({locationX, locationY});\n  };\n  return [\n    useMemo(\n      () => (Platform.OS === 'web' ? {onClick} : {onPress}),\n      // eslint-disable-next-line\n      [],\n    ),\n    getCellOnLayoutHandler,\n  ];\n};\nexport default useClearByFocusCell;\n"]},"metadata":{},"sourceType":"module"}