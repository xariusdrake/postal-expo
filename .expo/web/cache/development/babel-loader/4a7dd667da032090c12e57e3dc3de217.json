{"ast":null,"code":"import React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PropTypes from 'prop-types';\nimport { useTheme } from \"./CountryTheme\";\nvar styles = StyleSheet.create({\n  container: {\n    height: 48,\n    width: '15%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  imageStyle: {\n    height: 25,\n    width: 25,\n    resizeMode: 'contain'\n  }\n});\n\nvar CloseButtonAndroid = function CloseButtonAndroid(props) {\n  var closeImage = require(\"./assets/images/close.android.png\");\n\n  if (props.image) {\n    closeImage = props.image;\n  }\n\n  var _useTheme = useTheme(),\n      onBackgroundTextColor = _useTheme.onBackgroundTextColor;\n\n  return React.createElement(View, {\n    style: [styles.container, props.style]\n  }, React.createElement(TouchableNativeFeedback, {\n    background: Platform.Version < 21 ? TouchableNativeFeedback.SelectableBackground() : TouchableNativeFeedback.SelectableBackgroundBorderless(),\n    onPress: props.onPress\n  }, React.createElement(View, null, React.createElement(Image, {\n    source: closeImage,\n    style: [styles.imageStyle, props.imageStyle, {\n      tintColor: onBackgroundTextColor\n    }]\n  }))));\n};\n\nvar CloseButtonIOS = function CloseButtonIOS(props) {\n  var closeImage = require(\"./assets/images/close.ios.png\");\n\n  if (props.image) {\n    closeImage = props.image;\n  }\n\n  var _useTheme2 = useTheme(),\n      onBackgroundTextColor = _useTheme2.onBackgroundTextColor;\n\n  return React.createElement(View, {\n    style: [styles.container, props.style]\n  }, React.createElement(TouchableOpacity, {\n    onPress: props.onPress\n  }, React.createElement(Image, {\n    source: closeImage,\n    style: [styles.imageStyle, props.imageStyle, {\n      tintColor: onBackgroundTextColor\n    }]\n  })));\n};\n\nvar propTypes = {\n  onPress: PropTypes.func,\n  image: PropTypes.any\n};\nCloseButtonIOS.prototype = propTypes;\nCloseButtonAndroid.prototype = propTypes;\nexport default Platform.select({\n  ios: CloseButtonIOS,\n  android: CloseButtonAndroid,\n  web: CloseButtonIOS\n});","map":{"version":3,"sources":["../src/CloseButton.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;;;;;;;AAaA,OAAO,SAAP,MAAsB,YAAtB;AACA,SAAS,QAAT;AAEA,IAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CAAkB;AAC/B,EAAA,SAAS,EAAE;AACT,IAAA,MAAM,EAAE,EADC;AAET,IAAA,KAAK,EAAE,KAFE;AAGT,IAAA,UAAU,EAAE,QAHH;AAIT,IAAA,cAAc,EAAE;AAJP,GADoB;AAO/B,EAAA,UAAU,EAAE;AACV,IAAA,MAAM,EAAE,EADE;AAEV,IAAA,KAAK,EAAE,EAFG;AAGV,IAAA,UAAU,EAAE;AAHF;AAPmB,CAAlB,CAAf;;AAqBA,IAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,KAAD,EAA4B;AACrD,MAAI,UAAU,GAAG,OAAO,qCAAxB;;AAEA,MAAI,KAAK,CAAC,KAAV,EAAiB;AACf,IAAA,UAAU,GAAG,KAAK,CAAC,KAAnB;AACD;;AALoD,kBAMnB,QAAQ,EANW;AAAA,MAM7C,qBAN6C,aAM7C,qBAN6C;;AAOrD,SACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,IAAA,KAAK,EAAE,CAAC,MAAM,CAAC,SAAR,EAAmB,KAAK,CAAC,KAAzB;AAAR,GAAL,EACE,KAAA,CAAA,aAAA,CAAC,uBAAD,EAAwB;AACtB,IAAA,UAAU,EACR,QAAQ,CAAC,OAAT,GAAmB,EAAnB,GACI,uBAAuB,CAAC,oBAAxB,EADJ,GAEI,uBAAuB,CAAC,8BAAxB,EAJgB;AAMtB,IAAA,OAAO,EAAE,KAAK,CAAC;AANO,GAAxB,EAQE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK,IAAL,EACE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM;AACJ,IAAA,MAAM,EAAE,UADJ;AAEJ,IAAA,KAAK,EAAE,CACL,MAAM,CAAC,UADF,EAEL,KAAK,CAAC,UAFD,EAGL;AAAE,MAAA,SAAS,EAAE;AAAb,KAHK;AAFH,GAAN,CADF,CARF,CADF,CADF;AAuBD,CA9BD;;AAgCA,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,KAAD,EAA4B;AACjD,MAAI,UAAU,GAAG,OAAO,iCAAxB;;AAEA,MAAI,KAAK,CAAC,KAAV,EAAiB;AACf,IAAA,UAAU,GAAG,KAAK,CAAC,KAAnB;AACD;;AALgD,mBAMf,QAAQ,EANO;AAAA,MAMzC,qBANyC,cAMzC,qBANyC;;AAOjD,SACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,IAAA,KAAK,EAAE,CAAC,MAAM,CAAC,SAAR,EAAmB,KAAK,CAAC,KAAzB;AAAR,GAAL,EACE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB;AAAC,IAAA,OAAO,EAAE,KAAK,CAAC;AAAhB,GAAjB,EACE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM;AACJ,IAAA,MAAM,EAAE,UADJ;AAEJ,IAAA,KAAK,EAAE,CACL,MAAM,CAAC,UADF,EAEL,KAAK,CAAC,UAFD,EAGL;AAAE,MAAA,SAAS,EAAE;AAAb,KAHK;AAFH,GAAN,CADF,CADF,CADF;AAcD,CArBD;;AAuBA,IAAM,SAAS,GAAG;AAChB,EAAA,OAAO,EAAE,SAAS,CAAC,IADH;AAEhB,EAAA,KAAK,EAAE,SAAS,CAAC;AAFD,CAAlB;AAIA,cAAc,CAAC,SAAf,GAA2B,SAA3B;AACA,kBAAkB,CAAC,SAAnB,GAA+B,SAA/B;AAEA,eAAe,QAAQ,CAAC,MAAT,CAAgB;AAC7B,EAAA,GAAG,EAAE,cADwB;AAE7B,EAAA,OAAO,EAAE,kBAFoB;AAG7B,EAAA,GAAG,EAAE;AAHwB,CAAhB,CAAf","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { Image, TouchableNativeFeedback, View, Platform, TouchableOpacity, StyleSheet } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { useTheme } from './CountryTheme';\nconst styles = StyleSheet.create({\n    container: {\n        height: 48,\n        width: '15%',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    imageStyle: {\n        height: 25,\n        width: 25,\n        resizeMode: 'contain'\n    }\n});\nconst CloseButtonAndroid = (props) => {\n    let closeImage = require('./assets/images/close.android.png');\n    if (props.image) {\n        closeImage = props.image;\n    }\n    const { onBackgroundTextColor } = useTheme();\n    return (React.createElement(View, { style: [styles.container, props.style] },\n        React.createElement(TouchableNativeFeedback, { background: Platform.Version < 21\n                ? TouchableNativeFeedback.SelectableBackground()\n                : TouchableNativeFeedback.SelectableBackgroundBorderless(), onPress: props.onPress },\n            React.createElement(View, null,\n                React.createElement(Image, { source: closeImage, style: [\n                        styles.imageStyle,\n                        props.imageStyle,\n                        { tintColor: onBackgroundTextColor }\n                    ] })))));\n};\nconst CloseButtonIOS = (props) => {\n    let closeImage = require('./assets/images/close.ios.png');\n    if (props.image) {\n        closeImage = props.image;\n    }\n    const { onBackgroundTextColor } = useTheme();\n    return (React.createElement(View, { style: [styles.container, props.style] },\n        React.createElement(TouchableOpacity, { onPress: props.onPress },\n            React.createElement(Image, { source: closeImage, style: [\n                    styles.imageStyle,\n                    props.imageStyle,\n                    { tintColor: onBackgroundTextColor }\n                ] }))));\n};\nconst propTypes = {\n    onPress: PropTypes.func,\n    image: PropTypes.any\n};\nCloseButtonIOS.prototype = propTypes;\nCloseButtonAndroid.prototype = propTypes;\nexport default Platform.select({\n    ios: CloseButtonIOS,\n    android: CloseButtonAndroid,\n    web: CloseButtonIOS\n});\n//# sourceMappingURL=CloseButton.js.map"]},"metadata":{},"sourceType":"module"}