{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/xrs/DATA/Project/postalvn/postal-mobile/node_modules/@react-native-community/segmented-control/js/SegmentedControl.js\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SegmentedControlTab } from \"./SegmentedControlTab\";\n\nvar SegmentedControl = function SegmentedControl(_ref) {\n  var style = _ref.style,\n      onChange = _ref.onChange,\n      onValueChange = _ref.onValueChange,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n      selectedIndex = _ref.selectedIndex,\n      activeTextColor = _ref.activeTextColor,\n      values = _ref.values,\n      tintColor = _ref.tintColor,\n      textColor = _ref.textColor,\n      backgroundColor = _ref.backgroundColor,\n      fontSize = _ref.fontSize;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      segmentWidth = _React$useState2[0],\n      setSegmentWidth = _React$useState2[1];\n\n  var animation = React.useRef(new Animated.Value(0)).current;\n\n  var handleChange = function handleChange(index) {\n    var event = {\n      nativeEvent: {\n        value: values[index],\n        selectedSegmentIndex: index\n      }\n    };\n    onChange && onChange(event);\n    onValueChange && onValueChange(values[index]);\n  };\n\n  React.useEffect(function () {\n    if (animation && segmentWidth) {\n      Animated.timing(animation, {\n        toValue: segmentWidth * (selectedIndex || 0),\n        duration: 300,\n        easing: Easing.out(Easing.quad),\n        useNativeDriver: true\n      }).start();\n    }\n  }, [animation, segmentWidth, selectedIndex]);\n  return React.createElement(View, {\n    style: [styles.default, style, backgroundColor && {\n      backgroundColor: backgroundColor\n    }, !enabled && styles.disabled],\n    onLayout: function onLayout(_ref2) {\n      var width = _ref2.nativeEvent.layout.width;\n      var newSegmentWidth = values.length ? width / values.length : 0;\n\n      if (newSegmentWidth !== segmentWidth) {\n        animation.setValue(newSegmentWidth * (selectedIndex || 0));\n        setSegmentWidth(newSegmentWidth);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, selectedIndex != null && segmentWidth ? React.createElement(Animated.View, {\n    style: [styles.slider, {\n      transform: [{\n        translateX: animation\n      }],\n      width: segmentWidth,\n      backgroundColor: tintColor || 'white'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }) : null, values && values.map(function (value, index) {\n    return React.createElement(SegmentedControlTab, {\n      enabled: enabled,\n      selected: selectedIndex === index,\n      key: index,\n      value: value,\n      tintColor: tintColor,\n      textColor: textColor,\n      fontSize: fontSize,\n      activeTextColor: activeTextColor,\n      onSelect: function onSelect() {\n        handleChange(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    });\n  }));\n};\n\nvar styles = StyleSheet.create({\n  default: {\n    overflow: 'hidden',\n    position: 'relative',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignContent: 'center',\n    height: 28,\n    backgroundColor: '#eee',\n    borderRadius: 5\n  },\n  disabled: {\n    opacity: 0.4\n  },\n  slider: {\n    position: 'absolute',\n    borderRadius: 5,\n    top: 1,\n    bottom: 1,\n    right: 1,\n    left: 1\n  }\n});\nexport default SegmentedControl;","map":{"version":3,"sources":["/Users/xrs/DATA/Project/postalvn/postal-mobile/node_modules/@react-native-community/segmented-control/js/SegmentedControl.js"],"names":["React","SegmentedControlTab","SegmentedControl","style","onChange","onValueChange","enabled","selectedIndex","activeTextColor","values","tintColor","textColor","backgroundColor","fontSize","useState","segmentWidth","setSegmentWidth","animation","useRef","Animated","Value","current","handleChange","index","event","nativeEvent","value","selectedSegmentIndex","useEffect","timing","toValue","duration","easing","Easing","out","quad","useNativeDriver","start","styles","default","disabled","width","layout","newSegmentWidth","length","setValue","slider","transform","translateX","map","StyleSheet","create","overflow","position","flexDirection","justifyContent","alignContent","height","borderRadius","opacity","top","bottom","right","left"],"mappings":"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","sourcesContent":["/**\n * @flow\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {Animated, Easing, StyleSheet, View} from 'react-native';\nimport {SegmentedControlTab} from './SegmentedControlTab';\n\nimport type {SegmentedControlProps} from './types';\n\n/**\n * SegmentedControl\n * iOS 13 Style UISegmentedControl Component for Android and Web\n */\nconst SegmentedControl = ({\n  style,\n  onChange,\n  onValueChange,\n  enabled = true,\n  selectedIndex,\n  activeTextColor,\n  values,\n  tintColor,\n  textColor,\n  backgroundColor,\n  fontSize,\n}: SegmentedControlProps) => {\n  const [segmentWidth, setSegmentWidth] = React.useState(0);\n  const animation = React.useRef(new Animated.Value(0)).current;\n\n  const handleChange = (index: number) => {\n    // mocks iOS's nativeEvent\n    const event: any = {\n      nativeEvent: {\n        value: values[index],\n        selectedSegmentIndex: index,\n      },\n    };\n    onChange && onChange(event);\n    onValueChange && onValueChange(values[index]);\n  };\n\n  React.useEffect(() => {\n    if (animation && segmentWidth) {\n      Animated.timing(animation, {\n        toValue: segmentWidth * (selectedIndex || 0),\n        duration: 300,\n        easing: Easing.out(Easing.quad),\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [animation, segmentWidth, selectedIndex]);\n\n  return (\n    <View\n      style={[\n        styles.default,\n        style,\n        backgroundColor && {backgroundColor},\n        !enabled && styles.disabled,\n      ]}\n      onLayout={({\n        nativeEvent: {\n          layout: {width},\n        },\n      }) => {\n        const newSegmentWidth = values.length ? width / values.length : 0;\n        if (newSegmentWidth !== segmentWidth) {\n          animation.setValue(newSegmentWidth * (selectedIndex || 0));\n          setSegmentWidth(newSegmentWidth);\n        }\n      }}>\n      {selectedIndex != null && segmentWidth ? (\n        <Animated.View\n          style={[\n            styles.slider,\n            {\n              transform: [{translateX: animation}],\n              width: segmentWidth,\n              backgroundColor: tintColor || 'white',\n            },\n          ]}\n        />\n      ) : null}\n      {values &&\n        values.map((value, index) => {\n          return (\n            <SegmentedControlTab\n              enabled={enabled}\n              selected={selectedIndex === index}\n              key={index}\n              value={value}\n              tintColor={tintColor}\n              textColor={textColor}\n              fontSize={fontSize}\n              activeTextColor={activeTextColor}\n              onSelect={() => {\n                handleChange(index);\n              }}\n            />\n          );\n        })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  default: {\n    overflow: 'hidden',\n    position: 'relative',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignContent: 'center',\n    height: 28,\n    backgroundColor: '#eee',\n    borderRadius: 5,\n  },\n  disabled: {\n    opacity: 0.4,\n  },\n  slider: {\n    position: 'absolute',\n    borderRadius: 5,\n    top: 1,\n    bottom: 1,\n    right: 1,\n    left: 1,\n  },\n});\n\nexport default SegmentedControl;\n"]},"metadata":{},"sourceType":"module"}