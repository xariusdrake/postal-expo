{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as React from 'react';\nimport { getStyle, getSymbols } from \"./utils\";\nimport useFocusState from \"./useFocusState\";\nimport styles from \"./CodeField.styles\";\nvar DEFAULT_CELL_COUNT = 4;\n\nvar CodeField = function CodeField(_ref, ref) {\n  var rootStyle = _ref.rootStyle,\n      textInputStyle = _ref.textInputStyle,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      value = _ref.value,\n      renderCell = _ref.renderCell,\n      _ref$cellCount = _ref.cellCount,\n      cellCount = _ref$cellCount === void 0 ? DEFAULT_CELL_COUNT : _ref$cellCount,\n      _ref$RootProps = _ref.RootProps,\n      RootProps = _ref$RootProps === void 0 ? {} : _ref$RootProps,\n      _ref$RootComponent = _ref.RootComponent,\n      RootComponent = _ref$RootComponent === void 0 ? View : _ref$RootComponent,\n      rest = _objectWithoutProperties(_ref, [\"rootStyle\", \"textInputStyle\", \"onBlur\", \"onFocus\", \"value\", \"renderCell\", \"cellCount\", \"RootProps\", \"RootComponent\"]);\n\n  var _useFocusState = useFocusState({\n    onBlur: onBlur,\n    onFocus: onFocus\n  }),\n      _useFocusState2 = _slicedToArray(_useFocusState, 3),\n      isFocused = _useFocusState2[0],\n      handleOnBlur = _useFocusState2[1],\n      handleOnFocus = _useFocusState2[2];\n\n  var cells = getSymbols(value || '', cellCount).map(function (symbol, index, symbols) {\n    var isFirstEmptySymbol = symbols.indexOf('') === index;\n    return renderCell({\n      index: index,\n      symbol: symbol,\n      isFocused: isFocused && isFirstEmptySymbol\n    });\n  });\n  return React.createElement(RootComponent, _extends({}, RootProps, {\n    style: getStyle(styles.root, rootStyle)\n  }), cells, React.createElement(TextInput, _extends({\n    disableFullscreenUI: true,\n    caretHidden: true,\n    spellCheck: false,\n    autoCorrect: false,\n    blurOnSubmit: false,\n    clearButtonMode: 'never',\n    autoCapitalize: 'characters',\n    underlineColorAndroid: 'transparent',\n    maxLength: cellCount\n  }, rest, {\n    value: value,\n    onBlur: handleOnBlur,\n    onFocus: handleOnFocus,\n    style: getStyle(styles.textInput, textInputStyle),\n    ref: ref\n  })));\n};\n\nexport default React.forwardRef(CodeField);","map":{"version":3,"sources":["/Users/xrs/DATA/Project/postalvn/postal-mobile/node_modules/react-native-confirmation-code-field/esm/CodeField.js"],"names":["React","getStyle","getSymbols","useFocusState","styles","DEFAULT_CELL_COUNT","CodeField","ref","rootStyle","textInputStyle","onBlur","onFocus","value","renderCell","cellCount","RootProps","RootComponent","View","rest","isFocused","handleOnBlur","handleOnFocus","cells","map","symbol","index","symbols","isFirstEmptySymbol","indexOf","createElement","style","root","TextInput","disableFullscreenUI","caretHidden","spellCheck","autoCorrect","blurOnSubmit","clearButtonMode","autoCapitalize","underlineColorAndroid","maxLength","textInput","forwardRef"],"mappings":";;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,EAAkBC,UAAlB;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;AACA,IAAMC,kBAAkB,GAAG,CAA3B;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAahBC,GAbgB,EAcb;AAAA,MAZDC,SAYC,QAZDA,SAYC;AAAA,MAXDC,cAWC,QAXDA,cAWC;AAAA,MAVDC,MAUC,QAVDA,MAUC;AAAA,MATDC,OASC,QATDA,OASC;AAAA,MARDC,KAQC,QARDA,KAQC;AAAA,MAPDC,UAOC,QAPDA,UAOC;AAAA,4BANDC,SAMC;AAAA,MANDA,SAMC,+BANWT,kBAMX;AAAA,4BALDU,SAKC;AAAA,MALDA,SAKC,+BALW,EAKX;AAAA,gCAJDC,aAIC;AAAA,MAJDA,aAIC,mCAJeC,IAIf;AAAA,MAHEC,IAGF;;AAAA,uBAC8Cf,aAAa,CAAC;AAC7DO,IAAAA,MAAM,EAANA,MAD6D;AAE7DC,IAAAA,OAAO,EAAPA;AAF6D,GAAD,CAD3D;AAAA;AAAA,MACIQ,SADJ;AAAA,MACeC,YADf;AAAA,MAC6BC,aAD7B;;AAKH,MAAMC,KAAK,GAAGpB,UAAU,CAACU,KAAK,IAAI,EAAV,EAAcE,SAAd,CAAV,CAAmCS,GAAnC,CACZ,UAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,EAA4B;AAC1B,QAAMC,kBAAkB,GAAGD,OAAO,CAACE,OAAR,CAAgB,EAAhB,MAAwBH,KAAnD;AACA,WAAOZ,UAAU,CAAC;AAChBY,MAAAA,KAAK,EAALA,KADgB;AAEhBD,MAAAA,MAAM,EAANA,MAFgB;AAGhBL,MAAAA,SAAS,EAAEA,SAAS,IAAIQ;AAHR,KAAD,CAAjB;AAKD,GARW,CAAd;AAUA,SAAO3B,KAAK,CAAC6B,aAAN,CACLb,aADK,EAEL,SAAc,EAAd,EAAkBD,SAAlB,EAA6B;AAACe,IAAAA,KAAK,EAAE7B,QAAQ,CAACG,MAAM,CAAC2B,IAAR,EAAcvB,SAAd;AAAhB,GAA7B,CAFK,EAGLc,KAHK,EAILtB,KAAK,CAAC6B,aAAN,CACEG,SADF,EAEE,SACE;AACEC,IAAAA,mBAAmB,EAAE,IADvB;AAIEC,IAAAA,WAAW,EAAE,IAJf;AAKEC,IAAAA,UAAU,EAAE,KALd;AAMEC,IAAAA,WAAW,EAAE,KANf;AAOEC,IAAAA,YAAY,EAAE,KAPhB;AAQEC,IAAAA,eAAe,EAAE,OARnB;AASEC,IAAAA,cAAc,EAAE,YATlB;AAUEC,IAAAA,qBAAqB,EAAE,aAVzB;AAWEC,IAAAA,SAAS,EAAE3B;AAXb,GADF,EAcEI,IAdF,EAeE;AACEN,IAAAA,KAAK,EAAEA,KADT;AAEEF,IAAAA,MAAM,EAAEU,YAFV;AAGET,IAAAA,OAAO,EAAEU,aAHX;AAIES,IAAAA,KAAK,EAAE7B,QAAQ,CAACG,MAAM,CAACsC,SAAR,EAAmBjC,cAAnB,CAJjB;AAKEF,IAAAA,GAAG,EAAEA;AALP,GAfF,CAFF,CAJK,CAAP;AA+BD,CA5DD;;AA6DA,eAAeP,KAAK,CAAC2C,UAAN,CAAiBrC,SAAjB,CAAf","sourcesContent":["import {TextInput, View} from 'react-native';\nimport * as React from 'react';\nimport {getStyle, getSymbols} from './utils';\nimport useFocusState from './useFocusState';\nimport styles from './CodeField.styles';\nconst DEFAULT_CELL_COUNT = 4;\nconst CodeField = (\n  {\n    rootStyle,\n    textInputStyle,\n    onBlur,\n    onFocus,\n    value,\n    renderCell,\n    cellCount = DEFAULT_CELL_COUNT,\n    RootProps = {},\n    RootComponent = View,\n    ...rest\n  },\n  ref,\n) => {\n  const [isFocused, handleOnBlur, handleOnFocus] = useFocusState({\n    onBlur,\n    onFocus,\n  });\n  const cells = getSymbols(value || '', cellCount).map(\n    (symbol, index, symbols) => {\n      const isFirstEmptySymbol = symbols.indexOf('') === index;\n      return renderCell({\n        index,\n        symbol,\n        isFocused: isFocused && isFirstEmptySymbol,\n      });\n    },\n  );\n  return React.createElement(\n    RootComponent,\n    Object.assign({}, RootProps, {style: getStyle(styles.root, rootStyle)}),\n    cells,\n    React.createElement(\n      TextInput,\n      Object.assign(\n        {\n          disableFullscreenUI: true,\n          // Use `caretHidden={false}` when `value={''}` and user can't paste\\copy text because menu doesn't appear\n          // See more: https://github.com/retyui/react-native-confirmation-code-field/issues/140\n          caretHidden: true,\n          spellCheck: false,\n          autoCorrect: false,\n          blurOnSubmit: false,\n          clearButtonMode: 'never',\n          autoCapitalize: 'characters',\n          underlineColorAndroid: 'transparent',\n          maxLength: cellCount,\n        },\n        rest,\n        {\n          value: value,\n          onBlur: handleOnBlur,\n          onFocus: handleOnFocus,\n          style: getStyle(styles.textInput, textInputStyle),\n          ref: ref,\n        },\n      ),\n    ),\n  );\n};\nexport default React.forwardRef(CodeField);\n"]},"metadata":{},"sourceType":"module"}