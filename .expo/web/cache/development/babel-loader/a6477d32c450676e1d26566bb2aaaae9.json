{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { FlagType, CountryCodeList } from \"./types\";\nimport Fuse from 'fuse.js';\nvar imageJsonUrl = 'https://xcarpentier.github.io/react-native-country-picker-modal/countries/';\nvar localData = {\n  emojiCountries: undefined,\n  imageCountries: undefined\n};\nexport var loadDataAsync = function (data) {\n  return function () {\n    var dataType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : FlagType.EMOJI;\n    return new Promise(function (resolve, reject) {\n      switch (dataType) {\n        case FlagType.FLAT:\n          if (!data.imageCountries) {\n            fetch(imageJsonUrl).then(function (response) {\n              return response.json();\n            }).then(function (remoteData) {\n              data.imageCountries = remoteData;\n              resolve(data.imageCountries);\n            }).catch(reject);\n          } else {\n            resolve(data.imageCountries);\n          }\n\n          break;\n\n        default:\n          if (!data.emojiCountries) {\n            data.emojiCountries = require(\"./assets/data/countries-emoji.json\");\n            resolve(data.emojiCountries);\n          } else {\n            resolve(data.emojiCountries);\n          }\n\n          break;\n      }\n    });\n  };\n}(localData);\nexport var getEmojiFlagAsync = function getEmojiFlagAsync() {\n  var countryCode,\n      countries,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getEmojiFlagAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          countryCode = _args.length > 0 && _args[0] !== undefined ? _args[0] : 'FR';\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(loadDataAsync());\n\n        case 3:\n          countries = _context.sent;\n\n          if (countries) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error('Unable to find emoji because emojiCountries is undefined');\n\n        case 6:\n          return _context.abrupt(\"return\", countries[countryCode].flag);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getImageFlagAsync = function getImageFlagAsync() {\n  var countryCode,\n      countries,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function getImageFlagAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          countryCode = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 'FR';\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(loadDataAsync(FlagType.FLAT));\n\n        case 3:\n          countries = _context2.sent;\n\n          if (countries) {\n            _context2.next = 6;\n            break;\n          }\n\n          throw new Error('Unable to find image because imageCountries is undefined');\n\n        case 6:\n          return _context2.abrupt(\"return\", countries[countryCode].flag);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getCountryNameAsync = function getCountryNameAsync() {\n  var countryCode,\n      translation,\n      countries,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getCountryNameAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          countryCode = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 'FR';\n          translation = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 'common';\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(loadDataAsync());\n\n        case 4:\n          countries = _context3.sent;\n\n          if (countries) {\n            _context3.next = 7;\n            break;\n          }\n\n          throw new Error('Unable to find image because imageCountries is undefined');\n\n        case 7:\n          return _context3.abrupt(\"return\", countries[countryCode].name ? countries[countryCode].name[translation] : countries[countryCode].name['common']);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getCountryCallingCodeAsync = function getCountryCallingCodeAsync(countryCode) {\n  var countries;\n  return _regeneratorRuntime.async(function getCountryCallingCodeAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(loadDataAsync());\n\n        case 2:\n          countries = _context4.sent;\n\n          if (countries) {\n            _context4.next = 5;\n            break;\n          }\n\n          throw new Error('Unable to find image because imageCountries is undefined');\n\n        case 5:\n          return _context4.abrupt(\"return\", countries[countryCode].callingCode[0]);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getCountryCurrencyAsync = function getCountryCurrencyAsync(countryCode) {\n  var countries;\n  return _regeneratorRuntime.async(function getCountryCurrencyAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(loadDataAsync());\n\n        case 2:\n          countries = _context5.sent;\n\n          if (countries) {\n            _context5.next = 5;\n            break;\n          }\n\n          throw new Error('Unable to find image because imageCountries is undefined');\n\n        case 5:\n          return _context5.abrupt(\"return\", countries[countryCode].currency[0]);\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar isCountryPresent = function isCountryPresent(countries) {\n  return function (countryCode) {\n    return !!countries[countryCode];\n  };\n};\n\nvar isRegion = function isRegion(region) {\n  return function (country) {\n    return region ? country.region === region : true;\n  };\n};\n\nvar isSubregion = function isSubregion(subregion) {\n  return function (country) {\n    return subregion ? country.subregion === subregion : true;\n  };\n};\n\nvar isIncluded = function isIncluded(countryCodes) {\n  return function (country) {\n    return countryCodes && countryCodes.length > 0 ? countryCodes.includes(country.cca2) : true;\n  };\n};\n\nvar isExcluded = function isExcluded(excludeCountries) {\n  return function (country) {\n    return excludeCountries && excludeCountries.length > 0 ? !excludeCountries.includes(country.cca2) : true;\n  };\n};\n\nexport var getCountriesAsync = function getCountriesAsync(flagType) {\n  var translation,\n      region,\n      subregion,\n      countryCodes,\n      excludeCountries,\n      preferredCountries,\n      withAlphaFilter,\n      countriesRaw,\n      newCountryCodeList,\n      countries,\n      _countries,\n      _args6 = arguments;\n\n  return _regeneratorRuntime.async(function getCountriesAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          translation = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 'common';\n          region = _args6.length > 2 ? _args6[2] : undefined;\n          subregion = _args6.length > 3 ? _args6[3] : undefined;\n          countryCodes = _args6.length > 4 ? _args6[4] : undefined;\n          excludeCountries = _args6.length > 5 ? _args6[5] : undefined;\n          preferredCountries = _args6.length > 6 ? _args6[6] : undefined;\n          withAlphaFilter = _args6.length > 7 ? _args6[7] : undefined;\n          _context6.next = 9;\n          return _regeneratorRuntime.awrap(loadDataAsync(flagType));\n\n        case 9:\n          countriesRaw = _context6.sent;\n\n          if (countriesRaw) {\n            _context6.next = 12;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", []);\n\n        case 12:\n          if (!(preferredCountries && !withAlphaFilter)) {\n            _context6.next = 18;\n            break;\n          }\n\n          newCountryCodeList = [].concat(_toConsumableArray(preferredCountries), _toConsumableArray(CountryCodeList.filter(function (code) {\n            return !preferredCountries.includes(code);\n          })));\n          countries = newCountryCodeList.filter(isCountryPresent(countriesRaw)).map(function (cca2) {\n            return _objectSpread({\n              cca2: cca2\n            }, _objectSpread(_objectSpread({}, countriesRaw[cca2]), {}, {\n              name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']\n            }));\n          }).filter(isRegion(region)).filter(isSubregion(subregion)).filter(isIncluded(countryCodes)).filter(isExcluded(excludeCountries));\n          return _context6.abrupt(\"return\", countries);\n\n        case 18:\n          _countries = CountryCodeList.filter(isCountryPresent(countriesRaw)).map(function (cca2) {\n            return _objectSpread({\n              cca2: cca2\n            }, _objectSpread(_objectSpread({}, countriesRaw[cca2]), {}, {\n              name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']\n            }));\n          }).filter(isRegion(region)).filter(isSubregion(subregion)).filter(isIncluded(countryCodes)).filter(isExcluded(excludeCountries)).sort(function (country1, country2) {\n            return country1.name.localeCompare(country2.name);\n          });\n          return _context6.abrupt(\"return\", _countries);\n\n        case 20:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nvar DEFAULT_FUSE_OPTION = {\n  shouldSort: true,\n  threshold: 0.3,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: ['name', 'cca2', 'callingCode']\n};\nvar fuse;\nexport var search = function search() {\n  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_FUSE_OPTION;\n\n  if (data.length === 0) {\n    return [];\n  }\n\n  if (!fuse) {\n    fuse = new Fuse(data, options);\n  }\n\n  if (filter && filter !== '') {\n    var result = fuse.search(filter);\n    return result;\n  } else {\n    return data;\n  }\n};\n\nvar uniq = function uniq(arr) {\n  return Array.from(new Set(arr));\n};\n\nexport var getLetters = function getLetters(countries) {\n  return uniq(countries.map(function (country) {\n    return country.name.substr(0, 1).toLocaleUpperCase();\n  }).sort(function (l1, l2) {\n    return l1.localeCompare(l2);\n  }));\n};\nexport var getCountryInfoAsync = function getCountryInfoAsync(_ref) {\n  var countryCode, translation, countryName, currency, callingCode;\n  return _regeneratorRuntime.async(function getCountryInfoAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          countryCode = _ref.countryCode, translation = _ref.translation;\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(getCountryNameAsync(countryCode, translation || 'common'));\n\n        case 3:\n          countryName = _context7.sent;\n          _context7.next = 6;\n          return _regeneratorRuntime.awrap(getCountryCurrencyAsync(countryCode));\n\n        case 6:\n          currency = _context7.sent;\n          _context7.next = 9;\n          return _regeneratorRuntime.awrap(getCountryCallingCodeAsync(countryCode));\n\n        case 9:\n          callingCode = _context7.sent;\n          return _context7.abrupt(\"return\", {\n            countryName: countryName,\n            currency: currency,\n            callingCode: callingCode\n          });\n\n        case 11:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["../src/CountryService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { FlagType, CountryCodeList, } from './types';\nimport Fuse from 'fuse.js';\nconst imageJsonUrl = 'https://xcarpentier.github.io/react-native-country-picker-modal/countries/';\nconst localData = {\n    emojiCountries: undefined,\n    imageCountries: undefined,\n};\nexport const loadDataAsync = ((data) => (dataType = FlagType.EMOJI) => {\n    return new Promise((resolve, reject) => {\n        switch (dataType) {\n            case FlagType.FLAT:\n                if (!data.imageCountries) {\n                    fetch(imageJsonUrl)\n                        .then((response) => response.json())\n                        .then((remoteData) => {\n                        data.imageCountries = remoteData;\n                        resolve(data.imageCountries);\n                    })\n                        .catch(reject);\n                }\n                else {\n                    resolve(data.imageCountries);\n                }\n                break;\n            default:\n                if (!data.emojiCountries) {\n                    data.emojiCountries = require('./assets/data/countries-emoji.json');\n                    resolve(data.emojiCountries);\n                }\n                else {\n                    resolve(data.emojiCountries);\n                }\n                break;\n        }\n    });\n})(localData);\nexport const getEmojiFlagAsync = async (countryCode = 'FR') => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find emoji because emojiCountries is undefined');\n    }\n    return countries[countryCode].flag;\n};\nexport const getImageFlagAsync = async (countryCode = 'FR') => {\n    const countries = await loadDataAsync(FlagType.FLAT);\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].flag;\n};\nexport const getCountryNameAsync = async (countryCode = 'FR', translation = 'common') => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].name\n        ? countries[countryCode].name[translation]\n        : countries[countryCode].name['common'];\n};\nexport const getCountryCallingCodeAsync = async (countryCode) => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].callingCode[0];\n};\nexport const getCountryCurrencyAsync = async (countryCode) => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].currency[0];\n};\nconst isCountryPresent = (countries) => (countryCode) => !!countries[countryCode];\nconst isRegion = (region) => (country) => region ? country.region === region : true;\nconst isSubregion = (subregion) => (country) => subregion ? country.subregion === subregion : true;\nconst isIncluded = (countryCodes) => (country) => countryCodes && countryCodes.length > 0\n    ? countryCodes.includes(country.cca2)\n    : true;\nconst isExcluded = (excludeCountries) => (country) => excludeCountries && excludeCountries.length > 0\n    ? !excludeCountries.includes(country.cca2)\n    : true;\nexport const getCountriesAsync = async (flagType, translation = 'common', region, subregion, countryCodes, excludeCountries, preferredCountries, withAlphaFilter) => {\n    const countriesRaw = await loadDataAsync(flagType);\n    if (!countriesRaw) {\n        return [];\n    }\n    if (preferredCountries && !withAlphaFilter) {\n        const newCountryCodeList = [...preferredCountries, ...CountryCodeList.filter(code => !preferredCountries.includes(code))];\n        const countries = newCountryCodeList.filter(isCountryPresent(countriesRaw))\n            .map((cca2) => ({\n            cca2,\n            ...{\n                ...countriesRaw[cca2],\n                name: countriesRaw[cca2].name[translation] ||\n                    countriesRaw[cca2].name['common'],\n            },\n        }))\n            .filter(isRegion(region))\n            .filter(isSubregion(subregion))\n            .filter(isIncluded(countryCodes))\n            .filter(isExcluded(excludeCountries));\n        return countries;\n    }\n    else {\n        const countries = CountryCodeList.filter(isCountryPresent(countriesRaw))\n            .map((cca2) => ({\n            cca2,\n            ...{\n                ...countriesRaw[cca2],\n                name: countriesRaw[cca2].name[translation] ||\n                    countriesRaw[cca2].name['common'],\n            },\n        }))\n            .filter(isRegion(region))\n            .filter(isSubregion(subregion))\n            .filter(isIncluded(countryCodes))\n            .filter(isExcluded(excludeCountries))\n            .sort((country1, country2) => country1.name.localeCompare(country2.name));\n        return countries;\n    }\n};\nconst DEFAULT_FUSE_OPTION = {\n    shouldSort: true,\n    threshold: 0.3,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: ['name', 'cca2', 'callingCode'],\n};\nlet fuse;\nexport const search = (filter = '', data = [], options = DEFAULT_FUSE_OPTION) => {\n    if (data.length === 0) {\n        return [];\n    }\n    if (!fuse) {\n        fuse = new Fuse(data, options);\n    }\n    if (filter && filter !== '') {\n        const result = fuse.search(filter);\n        return result;\n    }\n    else {\n        return data;\n    }\n};\nconst uniq = (arr) => Array.from(new Set(arr));\nexport const getLetters = (countries) => {\n    return uniq(countries\n        .map((country) => country.name.substr(0, 1).toLocaleUpperCase())\n        .sort((l1, l2) => l1.localeCompare(l2)));\n};\nexport const getCountryInfoAsync = async ({ countryCode, translation, }) => {\n    const countryName = await getCountryNameAsync(countryCode, translation || 'common');\n    const currency = await getCountryCurrencyAsync(countryCode);\n    const callingCode = await getCountryCallingCodeAsync(countryCode);\n    return { countryName, currency, callingCode };\n};\n//# sourceMappingURL=CountryService.js.map"]},"metadata":{},"sourceType":"module"}