{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { memo } from 'react';\nimport { Emoji } from \"./Emoji\";\nimport { useContext } from \"./CountryContext\";\nimport { useAsync } from 'react-async-hook';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 30,\n    marginRight: 10\n  },\n  emojiFlag: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 1 / PixelRatio.get(),\n    borderColor: 'transparent',\n    backgroundColor: 'transparent'\n  },\n  imageFlag: {\n    resizeMode: 'contain',\n    width: 25,\n    height: 19,\n    borderWidth: 1 / PixelRatio.get(),\n    opacity: 0.8\n  }\n});\nvar ImageFlag = memo(function (_ref) {\n  var countryCode = _ref.countryCode,\n      flagSize = _ref.flagSize;\n\n  var _useContext = useContext(),\n      getImageFlagAsync = _useContext.getImageFlagAsync;\n\n  var asyncResult = useAsync(getImageFlagAsync, [countryCode]);\n\n  if (asyncResult.loading) {\n    return React.createElement(ActivityIndicator, {\n      size: 'small'\n    });\n  }\n\n  return React.createElement(Image, {\n    resizeMode: 'contain',\n    style: [styles.imageFlag, {\n      borderColor: 'transparent',\n      height: flagSize\n    }],\n    source: {\n      uri: asyncResult.result\n    }\n  });\n});\nvar EmojiFlag = memo(function (_ref2) {\n  var countryCode = _ref2.countryCode,\n      flagSize = _ref2.flagSize;\n\n  var _useContext2 = useContext(),\n      getEmojiFlagAsync = _useContext2.getEmojiFlagAsync;\n\n  var asyncResult = useAsync(getEmojiFlagAsync, [countryCode]);\n\n  if (asyncResult.loading) {\n    return React.createElement(ActivityIndicator, {\n      size: 'small'\n    });\n  }\n\n  return React.createElement(Text, {\n    style: [styles.emojiFlag, {\n      fontSize: flagSize\n    }],\n    allowFontScaling: false\n  }, React.createElement(Emoji, _extends({}, {\n    name: asyncResult.result\n  })));\n});\nexport var Flag = function Flag(_ref3) {\n  var countryCode = _ref3.countryCode,\n      withEmoji = _ref3.withEmoji,\n      withFlagButton = _ref3.withFlagButton,\n      flagSize = _ref3.flagSize;\n  return withFlagButton ? React.createElement(View, {\n    style: styles.container\n  }, withEmoji ? React.createElement(EmojiFlag, _extends({}, {\n    countryCode: countryCode,\n    flagSize: flagSize\n  })) : React.createElement(ImageFlag, _extends({}, {\n    countryCode: countryCode,\n    flagSize: flagSize\n  }))) : null;\n};\nFlag.defaultProps = {\n  withEmoji: true,\n  withFlagButton: true\n};","map":{"version":3,"sources":["../src/Flag.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { memo } from 'react';\nimport { Emoji } from './Emoji';\nimport { useContext } from './CountryContext';\nimport { useAsync } from 'react-async-hook';\nimport { Image, StyleSheet, PixelRatio, Text, View, ActivityIndicator, } from 'react-native';\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 30,\n        marginRight: 10,\n    },\n    emojiFlag: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderWidth: 1 / PixelRatio.get(),\n        borderColor: 'transparent',\n        backgroundColor: 'transparent',\n    },\n    imageFlag: {\n        resizeMode: 'contain',\n        width: 25,\n        height: 19,\n        borderWidth: 1 / PixelRatio.get(),\n        opacity: 0.8,\n    },\n});\nconst ImageFlag = memo(({ countryCode, flagSize }) => {\n    const { getImageFlagAsync } = useContext();\n    const asyncResult = useAsync(getImageFlagAsync, [countryCode]);\n    if (asyncResult.loading) {\n        return React.createElement(ActivityIndicator, { size: 'small' });\n    }\n    return (React.createElement(Image, { resizeMode: 'contain', style: [\n            styles.imageFlag,\n            { borderColor: 'transparent', height: flagSize },\n        ], source: { uri: asyncResult.result } }));\n});\nconst EmojiFlag = memo(({ countryCode, flagSize }) => {\n    const { getEmojiFlagAsync } = useContext();\n    const asyncResult = useAsync(getEmojiFlagAsync, [countryCode]);\n    if (asyncResult.loading) {\n        return React.createElement(ActivityIndicator, { size: 'small' });\n    }\n    return (React.createElement(Text, { style: [styles.emojiFlag, { fontSize: flagSize }], allowFontScaling: false },\n        React.createElement(Emoji, Object.assign({}, { name: asyncResult.result }))));\n});\nexport const Flag = ({ countryCode, withEmoji, withFlagButton, flagSize, }) => withFlagButton ? (React.createElement(View, { style: styles.container }, withEmoji ? (React.createElement(EmojiFlag, Object.assign({}, { countryCode, flagSize }))) : (React.createElement(ImageFlag, Object.assign({}, { countryCode, flagSize }))))) : null;\nFlag.defaultProps = {\n    withEmoji: true,\n    withFlagButton: true,\n};\n//# sourceMappingURL=Flag.js.map"]},"metadata":{},"sourceType":"module"}