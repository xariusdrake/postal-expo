{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport * as React from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AnimatedModal } from \"./AnimatedModal\";\nimport { Modal } from \"./Modal\";\nimport { useTheme } from \"./CountryTheme\";\nimport { CountryModalContext } from \"./CountryModalProvider\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\nexport var CountryModal = function CountryModal(_ref) {\n  var children = _ref.children,\n      withModal = _ref.withModal,\n      disableNativeModal = _ref.disableNativeModal,\n      props = _objectWithoutProperties(_ref, [\"children\", \"withModal\", \"disableNativeModal\"]);\n\n  var _useTheme = useTheme(),\n      backgroundColor = _useTheme.backgroundColor;\n\n  var _React$useContext = React.useContext(CountryModalContext),\n      teleport = _React$useContext.teleport;\n\n  var content = React.createElement(SafeAreaView, {\n    style: [styles.container, {\n      backgroundColor: backgroundColor\n    }]\n  }, children);\n  React.useEffect(function () {\n    if (disableNativeModal) {\n      teleport(React.createElement(AnimatedModal, _extends({}, props), content));\n    }\n  }, [disableNativeModal]);\n\n  if (withModal) {\n    if (Platform.OS === 'web') {\n      return React.createElement(Modal, _extends({}, props), content);\n    }\n\n    if (disableNativeModal) {\n      return null;\n    }\n\n    return React.createElement(Modal, _extends({}, props), content);\n  }\n\n  return content;\n};\nCountryModal.defaultProps = {\n  animationType: 'slide',\n  animated: true,\n  withModal: true,\n  disableNativeModal: false\n};","map":{"version":3,"sources":["../src/CountryModal.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;;AAEA,SAAS,aAAT;AACA,SAAS,KAAT;AACA,SAAS,QAAT;AACA,SAAS,mBAAT;AAEA,IAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CAAkB;AAC/B,EAAA,SAAS,EAAE;AACT,IAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf;AAMA,OAAO,IAAM,YAAY,GAAG,SAAf,YAAe,OASvB;AAAA,MARH,QAQG,QARH,QAQG;AAAA,MAPH,SAOG,QAPH,SAOG;AAAA,MANH,kBAMG,QANH,kBAMG;AAAA,MALA,KAKA;;AAAA,kBACyB,QAAQ,EADjC;AAAA,MACK,eADL,aACK,eADL;;AAAA,0BAEkB,KAAK,CAAC,UAAN,CAAiB,mBAAjB,CAFlB;AAAA,MAEK,QAFL,qBAEK,QAFL;;AAGH,MAAM,OAAO,GACX,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,IAAA,KAAK,EAAE,CAAC,MAAM,CAAC,SAAR,EAAmB;AAAE,MAAA,eAAe,EAAf;AAAF,KAAnB;AAAR,GAAb,EACG,QADH,CADF;AAKA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAK;AACnB,QAAI,kBAAJ,EAAwB;AACtB,MAAA,QAAS,CAAC,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,SAAA,EAAA,EAAK,KAAL,CAAd,EAA2B,OAA3B,CAAD,CAAT;AACD;AACF,GAJD,EAIG,CAAC,kBAAD,CAJH;;AAKA,MAAI,SAAJ,EAAe;AACb,QAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAO,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM,SAAA,EAAA,EAAK,KAAL,CAAN,EAAmB,OAAnB,CAAP;AACD;;AACD,QAAI,kBAAJ,EAAwB;AACtB,aAAO,IAAP;AACD;;AACD,WAAO,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM,SAAA,EAAA,EAAK,KAAL,CAAN,EAAmB,OAAnB,CAAP;AACD;;AACD,SAAO,OAAP;AACD,CAhCM;AAkCP,YAAY,CAAC,YAAb,GAA4B;AAC1B,EAAA,aAAa,EAAE,OADW;AAE1B,EAAA,QAAQ,EAAE,IAFgB;AAG1B,EAAA,SAAS,EAAE,IAHe;AAI1B,EAAA,kBAAkB,EAAE;AAJM,CAA5B","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { SafeAreaView, StyleSheet, Platform } from 'react-native';\nimport { AnimatedModal } from './AnimatedModal';\nimport { Modal } from './Modal';\nimport { useTheme } from './CountryTheme';\nimport { CountryModalContext } from './CountryModalProvider';\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n});\nexport const CountryModal = ({ children, withModal, disableNativeModal, ...props }) => {\n    const { backgroundColor } = useTheme();\n    const { teleport } = React.useContext(CountryModalContext);\n    const content = (React.createElement(SafeAreaView, { style: [styles.container, { backgroundColor }] }, children));\n    React.useEffect(() => {\n        if (disableNativeModal) {\n            teleport(React.createElement(AnimatedModal, Object.assign({}, props), content));\n        }\n    }, [disableNativeModal]);\n    if (withModal) {\n        if (Platform.OS === 'web') {\n            return React.createElement(Modal, Object.assign({}, props), content);\n        }\n        if (disableNativeModal) {\n            return null;\n        }\n        return React.createElement(Modal, Object.assign({}, props), content);\n    }\n    return content;\n};\nCountryModal.defaultProps = {\n    animationType: 'slide',\n    animated: true,\n    withModal: true,\n    disableNativeModal: false,\n};\n//# sourceMappingURL=CountryModal.js.map"]},"metadata":{},"sourceType":"module"}